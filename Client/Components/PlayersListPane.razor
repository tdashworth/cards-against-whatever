@inject BlazorComponentBus.ComponentBus Bus  

<section class="card" style="@CssStyle">
    <div class="card-header">
        <b>Players</b>
    </div>
    <ul class="list-group list-group-flush" style="overflow-y: auto;">
        @foreach (var player in Players)
        {
            <li class="list-group-item">@player.Username (@player.Score)<span class="float-right">@player.State.ToString()</span></li>
        }
        <li class="list-group-item"></li>
    </ul>
</section>

@code {
    [Parameter]
    public string CssStyle { get; set; }

    private List<Player> Players = new();
    private Player CardCzar;

    protected override void OnInitialized()
    {
        Bus.Subscribe<GameJoinedEvent>((args) => OnGameJoined(args.GetMessage<GameJoinedEvent>()));
        Bus.Subscribe<PlayerJoinedEvent>((args) => OnNewPlayer(args.GetMessage<PlayerJoinedEvent>()));
        Bus.Subscribe<RoundStartedEvent>((args) => OnRoundStarted(args.GetMessage<RoundStartedEvent>()));
        Bus.Subscribe<PlayerMovedEvent>((args) => OnPlayerMoved(args.GetMessage<PlayerMovedEvent>()));
        Bus.Subscribe<RoundClosedEvent>((args) => OnRoundClosed(args.GetMessage<RoundClosedEvent>()));
        Bus.Subscribe<RoundEndedEvent>((args) => OnRoundEnded(args.GetMessage<RoundEndedEvent>()));
    }

    private void OnGameJoined(GameJoinedEvent gameJoinedEvent)
    {
        Players.AddRange(gameJoinedEvent.ExistingPlayersInGame.Where(player => player.Username != gameJoinedEvent.Username));
        StateHasChanged();
    }

    private void OnNewPlayer(PlayerJoinedEvent newPlayerEvent)
    {
        Players.Add(newPlayerEvent.NewPlayer);
        StateHasChanged();
    }

    private void OnRoundStarted(RoundStartedEvent roundStartedEvent)
    {
        CardCzar = Players.FirstOrDefault(player => player.Username == roundStartedEvent.CardCzar.Username);
        Players.ForEach(player => player.State = PlayerState.PlayingMove);
        CardCzar.State = PlayerState.CardCzarAwaitingMoves;
        StateHasChanged();
    }

    private void OnPlayerMoved(PlayerMovedEvent playerMovedEvent)
    {
        Players.FirstOrDefault(player => player.Username == playerMovedEvent.Username).State = PlayerState.CardCzarAwaitingMoves;
        StateHasChanged();
    }

    private void OnRoundClosed(RoundClosedEvent roundClosedEvent)
    {
        CardCzar.State = PlayerState.PlayingMove;
        StateHasChanged();
    }

    private void OnRoundEnded(RoundEndedEvent roundEndedEvent)
    {
        var winningPlayer = Players.FirstOrDefault(player => player.Username == roundEndedEvent.Winner.Username);
        winningPlayer.Score++;
        Players.ForEach(player => player.State = PlayerState.InLobby);
        StateHasChanged();
    }

}
