@inject BlazorComponentBus.ComponentBus Bus

<section class="card" style="@CssStyle">
    <div class="card-header">
        <b>Your Hand</b>
    </div>
    <div class="card-body p-0">
        <div class="game-card-list">
            @foreach (var card in CardsInHand)
            {
                <article class="game-card answer-card" @onclick="() => OnCardSelected(card)">
                    <div class="dummy"></div>
                    <header class="game-card-header">
                        <h3>@card.Text</h3>
                    </header>
                    @if (SelectedCards.Contains(card))
                    {
                        <div class="game-card-footer">
                            <span>Picked</span>
                        </div>
                    }
                </article>
            }
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string CssStyle { get; set; }

    QuestionCard QuestionCard;
    List<AnswerCard> CardsInHand = new();
    List<AnswerCard> SelectedCards = new();

    bool IsSinglePickQuestion { get => QuestionCard.Picks == 1; }
    bool HasSelectedRequiredCards { get => SelectedCards.Count == QuestionCard.Picks; }

    protected override async Task OnInitializedAsync()
    {
        Bus.Subscribe<RoundStartedEvent>((args) => OnRoundStarted(args.GetMessage<RoundStartedEvent>()));
    }

    void OnRoundStarted(RoundStartedEvent roundStartedEvent)
    {
        QuestionCard = roundStartedEvent.QuestionCard;
        CardsInHand.AddRange(roundStartedEvent.DealtCards);
        StateHasChanged();
    }

    void OnCardSelected(AnswerCard card)
    {
        if (IsSinglePickQuestion)
        {
            SelectedCards.Clear();
            SelectedCards.Add(card);
        }
        else
        {
            if (SelectedCards.Contains(card))
            {
                SelectedCards.Remove(card);
            }
            else if (SelectedCards.Count < QuestionCard.Picks)
            {
                SelectedCards.Add(card);
            }
        }

        Bus.Publish(new CardSelectedEvent { SelectedCards = SelectedCards });
        StateHasChanged();
    }
}
