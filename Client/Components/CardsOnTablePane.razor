@inject BlazorComponentBus.ComponentBus Bus

<section class="card" style="@(IsDiplayed ? string.Empty : "display: none;") @CssStyle">
    <div class="card-header">
        <b>Table</b>
    </div>
    <div class="card-body p-0">
        <div class="game-card-list">
            @foreach (var playersSelection in CardsOnTable)
            {
                <div class="selectable-game-card d-flex mr-4" @onclick="() => OnWinningCardSetSelected(playersSelection)">
                    @foreach (var card in playersSelection)
                    {
                        <article class="game-card answer-card">
                            <div class="dummy"></div>
                            <header class="game-card-header">
                                <h3>@card.Text</h3>
                            </header>
                            @if (playersSelection == SelectedCards)
                            {
                                <div class="game-card-footer">
                                    <span>Picked</span>
                                </div>
                            }
                        </article>
                    }
                </div>
            }
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string CssStyle { get; set; }

    private QuestionCard QuestionCard;
    private List<List<AnswerCard>> CardsOnTable = new();
    private List<AnswerCard> SelectedCards = new();
    private string Username;
    private bool IsCardCzar;
    private bool IsDiplayed;
    private bool IsSinglePickQuestion { get => QuestionCard.Picks == 1; }
    private bool HasSelectedRequiredCards { get => SelectedCards.Count == QuestionCard.Picks; }

    protected override void OnInitialized()
    {
        Bus.Subscribe<GameJoinedEvent>(args => OnGameJoined(args.GetMessage<GameJoinedEvent>()));
        Bus.Subscribe<RoundStartedEvent>(args => OnRoundStarted(args.GetMessage<RoundStartedEvent>()));
        Bus.Subscribe<PlayerMovedEvent>(args => OnPlayerMoved(args.GetMessage<PlayerMovedEvent>()));
        Bus.Subscribe<RoundClosedEvent>(args => OnRoundClosed(args.GetMessage<RoundClosedEvent>()));
    }

    private void OnGameJoined(GameJoinedEvent gameJoinedEvent)
    {
        Username = gameJoinedEvent.Username;
    }

    void OnRoundStarted(RoundStartedEvent roundStartedEvent)
    {
        QuestionCard = roundStartedEvent.QuestionCard;
        CardsOnTable = new();
        IsCardCzar = roundStartedEvent.CardCzar.Username == Username;
        IsDiplayed = IsCardCzar;
        SelectedCards = new();
        StateHasChanged();
    }

    void OnPlayerMoved(PlayerMovedEvent playerMovedEvent)
    {
        var blankSelection = Enumerable.Range(1, QuestionCard.Picks).Select(x => new AnswerCard(string.Empty)).ToList();
        CardsOnTable.Add(blankSelection);
        if (playerMovedEvent.Username == Username && !IsDiplayed)
        {
            IsDiplayed = true;
        }
        StateHasChanged();
    }

    void OnRoundClosed(RoundClosedEvent roundClosedEvent)
    {
        CardsOnTable = roundClosedEvent.PlayedCardsGroupedPerPlayer;
        StateHasChanged();
    }

    void OnWinningCardSetSelected(List<AnswerCard> cards)
    {
        if (!IsCardCzar) return;

        SelectedCards = cards;

        Bus.Publish(new WinningCardSelectedEvent { SelectedWinningCards = SelectedCards });
        StateHasChanged();
    }
}
