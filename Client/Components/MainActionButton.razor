@inherits FluxorComponent
@inject IState<GameState> CurrentGameState
@inject IDispatcher Dispatcher

@if (!string.IsNullOrEmpty(Label))
{
    <button type="button"
            class="btn btn-primary w-100"
            disabled="@(!IsEnabled)"
            @onclick="OnClick ?? (() => { })">
        @Label
    </button>
}
@if (!string.IsNullOrEmpty(Message))
{
    <p class="my-2 w-100 text-center">
        @Message
    </p>
}

@code {
    private PlayerState? MyState => CurrentGameState.Value.Me?.State;
    private bool IsCardCzar => CurrentGameState.Value.IsCardCzar;

    private string? Label => MyState switch
    {
        PlayerState.InLobby => "Start Round",
        PlayerState.PlayingAnswer => "Play Answer",
        PlayerState.AnswerPlayed => null,
        PlayerState.AwatingAnswers => null,
        PlayerState.PickingWinner => "Confirm Winner",
        _ => $"**{MyState.ToString()}**"
    };

    private string? Message => MyState switch
    {
        PlayerState.InLobby => null,
        PlayerState.PlayingAnswer => CurrentGameState.Value.CurrentQuestion?.Picks == CurrentGameState.Value.SelectedCardsInHand?.Count ? null : "Select the card(s) you wish to play.",
        PlayerState.AnswerPlayed => "Please wait for each player to play their answer.",
        PlayerState.AwatingAnswers => "Please wait for each player to play their answer.",
        PlayerState.PickingWinner => (CurrentGameState.Value.SelectedCardsOnTable?.Any() ?? false) ? null : "Select the card(s) you wish to play.",
        _ => null
    };

    private bool IsEnabled => string.IsNullOrEmpty(Message);

    private Action? OnClick => MyState switch
    {
        PlayerState.InLobby => StartRound,
        PlayerState.PlayingAnswer => PlayAnswer,
        PlayerState.AnswerPlayed => null,
        PlayerState.AwatingAnswers => null,
        PlayerState.PickingWinner => ConfirmWinner,
        _ => null
    };

    private void StartRound() => Dispatcher.Dispatch(new StartRoundAction());

    private void PlayAnswer() => Dispatcher.Dispatch(new PlayAnswerAction());

    private void ConfirmWinner() => Dispatcher.Dispatch(new PickWinnerAction());

}
