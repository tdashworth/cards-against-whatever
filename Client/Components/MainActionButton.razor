@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject BlazorComponentBus.ComponentBus Bus

@if (Label != string.Empty)
{
    <button type="button"
            class="btn btn-primary w-100"
            disabled="@(!IsEnabled)"
            @onclick="() => OnClick()">
        @Label
    </button>
}
@if (Message != string.Empty)
{
    <p>@Message</p>
}

@code {
    private string Label;
    private string Message;
    private bool IsEnabled;
    private Action OnClick;

    private string Code;
    private string Username;
    List<AnswerCard> SelectedCards = new();
    private bool IsCardCzar;
    private QuestionCard QuestionCard;

    protected override void OnInitialized()
    {
        Bus.Subscribe<GameJoinedEvent>((args) => OnGameJoined(args.GetMessage<GameJoinedEvent>()));
        Bus.Subscribe<RoundStartedEvent>((args) => OnRoundStarted(args.GetMessage<RoundStartedEvent>()));
        Bus.Subscribe<RoundClosedEvent>((args) => OnRoundClosed(args.GetMessage<RoundClosedEvent>()));
        Bus.Subscribe<RoundEndedEvent>((args) => OnRoundEnded(args.GetMessage<RoundEndedEvent>()));
        Bus.Subscribe<CardSelectedEvent>((args) => OnCardSelected(args.GetMessage<CardSelectedEvent>()));
        Bus.Subscribe<WinningCardSelectedEvent>((args) => OnWinningCardSelected(args.GetMessage<WinningCardSelectedEvent>()));
    }

    private void OnGameJoined(GameJoinedEvent gameJoinedEvent)
    {
        Code = gameJoinedEvent.Code;
        Username = gameJoinedEvent.Username;

        Reset();
        Label = "Start Game";
        OnClick = async () =>
        {
            await HubConnection.SendAsync(nameof(IGameServer.StartRound), new StartRoundAction
            {
                GameCode = Code
            });
            Reset();
        };
        StateHasChanged();
    }

    private void OnRoundStarted(RoundStartedEvent roundStartedEvent)
    {
        IsCardCzar = roundStartedEvent.CardCzar.Username == Username;
        QuestionCard = roundStartedEvent.QuestionCard;
        SelectedCards = null;

        Reset();
        if (IsCardCzar)
        {
            Message = "Please wait for all player to make their move.";
        }
        else
        {
            Label = QuestionCard.Picks == 1
                ? "Play Selected Card"
                : "Play selected Cards";
            Message = QuestionCard.Picks == 1
                ? "Please select a card to play."
                : $"Please select {QuestionCard.Picks} cards to play.";
            IsEnabled = false;
            OnClick = async () =>
            {
                await HubConnection.SendAsync(nameof(IGameServer.PlayPlayerMove), new PlayAnswerAction
                {
                    GameCode = Code,
                    Username = Username,
                    PlayedCards = SelectedCards,
                });
                Reset();
            };
        }
        StateHasChanged();
    }

    private void OnRoundClosed(RoundClosedEvent roundClosedEvent)
    {
        Reset();
        if (IsCardCzar)
        {
            Label = QuestionCard.Picks == 1
                ? "Confirm Winning Card"
                : "Confirm Winning Card";
            Message = QuestionCard.Picks == 1
                ? "Please select winning card."
                : "Please select winning cards.";
            IsEnabled = false;
            OnClick = async () =>
            {
                await HubConnection.SendAsync(nameof(IGameServer.PlayCardCzarMove), new PickWinnerAnswerAction
                {
                    GameCode = Code,
                    WinningCards = SelectedCards,
                });
                Reset();
            };
        }
        else
        {
            Message = "Please wait for CardCzar to make their decision.";
        }
        StateHasChanged();
    }

    private void OnCardSelected(CardSelectedEvent cardSelectedEvent)
    {
        if (IsCardCzar) return;

        SelectedCards = cardSelectedEvent.SelectedCards;

        if (SelectedCards.Count == QuestionCard.Picks)
        {
            Message = string.Empty;
            IsEnabled = true;
        }
        else
        {
            Message = QuestionCard.Picks == 1
                ? "Please select a card to play."
                : $"Please select {QuestionCard.Picks} cards to play.";
            IsEnabled = false;
        }

        StateHasChanged();
    }

    private void OnWinningCardSelected(WinningCardSelectedEvent winningCardSelectedEvent)
    {
        if (!IsCardCzar) return;

        SelectedCards = winningCardSelectedEvent.SelectedWinningCards;

        if (SelectedCards.Any())
        {
            Message = string.Empty;
            IsEnabled = true;
        }

        StateHasChanged();
    }

    private void OnRoundEnded(RoundEndedEvent roundEndedEvent)
    {
        Reset();
        Label = "Start New Round";
        OnClick = async () =>
        {
            await HubConnection.SendAsync(nameof(IGameServer.StartRound), new StartRoundAction
            {
                GameCode = Code
            });
            Reset();
        };
        StateHasChanged();
    }

    private void Reset()
    {
        Label = string.Empty;
        Message = string.Empty;
        IsEnabled = true;
        OnClick = () => { };
    }
}
