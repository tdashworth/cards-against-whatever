@inherits FluxorComponent
@inject IState<GameState> CurrentGameState
@inject IDispatcher Dispatcher

@if (!string.IsNullOrEmpty(Label))
{
    <button type="button"
            class="btn btn-primary w-100"
            disabled="@(!IsEnabled)"
            @onclick="OnClick ?? (() => { })">
        @Label
    </button>
}
@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

@code {
    private PlayerState? MyState => CurrentGameState.Value.Me?.State;
    private bool IsCardCzar => CurrentGameState.Value.IsCardCzar;

    private string? Label => MyState switch
    {
        PlayerState.InLobby => "Start Round",
        PlayerState.PlayingAnswer => "Play Answer",
        PlayerState.AnswerPlayed => null,
        PlayerState.AwatingAnswers => null,
        PlayerState.PickingWinner => "Confirm Winner",
        _ => $"**{MyState.ToString()}**"
    };

    private string? Message => MyState switch
    {
        PlayerState.InLobby => null,
        PlayerState.PlayingAnswer => CurrentGameState.Value.CurrentQuestion?.Picks == CurrentGameState.Value.SelectedCardsInHand?.Count ? null : "Select the card(s) you wish to play.",
        PlayerState.AnswerPlayed => "Please wait for each player to play their answer.",
        PlayerState.AwatingAnswers => "Please wait for each player to play their answer.",
        PlayerState.PickingWinner => (CurrentGameState.Value.SelectedCardsOnTable?.Any() ?? false) ? null : "Select the card(s) you wish to play.",
        _ => null
    };

    private bool IsEnabled => string.IsNullOrEmpty(Message);

    private Action? OnClick => MyState switch
    {
        PlayerState.InLobby => StartRound,
        PlayerState.PlayingAnswer => PlayAnswer,
        PlayerState.AnswerPlayed => null,
        PlayerState.AwatingAnswers => null,
        PlayerState.PickingWinner => ConfirmWinner,
        _ => null
    };

    private void StartRound() => Dispatcher.Dispatch(new StartRoundAction());

    private void PlayAnswer() => Dispatcher.Dispatch(new PlayAnswerAction());

    private void ConfirmWinner() => Dispatcher.Dispatch(new PickWinnerAction());

    //private string Code;
    //private string Username;
    //List<AnswerCard> SelectedCards = new();
    //private bool IsCardCzar;
    //private QuestionCard QuestionCard;

    //protected override void OnInitialized()
    //{
    //    Bus.Subscribe<GameJoinedEvent>((args) => OnGameJoined(args.GetMessage<GameJoinedEvent>()));
    //    Bus.Subscribe<RoundStartedEvent>((args) => OnRoundStarted(args.GetMessage<RoundStartedEvent>()));
    //    Bus.Subscribe<RoundClosedEvent>((args) => OnRoundClosed(args.GetMessage<RoundClosedEvent>()));
    //    Bus.Subscribe<RoundEndedEvent>((args) => OnRoundEnded(args.GetMessage<RoundEndedEvent>()));
    //    Bus.Subscribe<CardSelectedEvent>((args) => OnCardSelected(args.GetMessage<CardSelectedEvent>()));
    //    Bus.Subscribe<WinningCardSelectedEvent>((args) => OnWinningCardSelected(args.GetMessage<WinningCardSelectedEvent>()));
    //}

    //private void OnGameJoined(GameJoinedEvent gameJoinedEvent)
    //{
    //    Code = gameJoinedEvent.Code;
    //    Username = gameJoinedEvent.Username;

    //    Reset();
    //    Label = "Start Game";
    //    OnClick = async () =>
    //    {
    //        await GameServer.StartRound(new StartRoundAction
    //        {
    //            GameCode = Code
    //        });
    //        Reset();
    //    };
    //    StateHasChanged();
    //}

    //private void OnRoundStarted(RoundStartedEvent roundStartedEvent)
    //{
    //    IsCardCzar = roundStartedEvent.CardCzar.Username == Username;
    //    QuestionCard = roundStartedEvent.QuestionCard;
    //    SelectedCards = null;

    //    Reset();
    //    if (IsCardCzar)
    //    {
    //        Message = "Please wait for all player to make their move.";
    //    }
    //    else
    //    {
    //        Label = QuestionCard.Picks == 1
    //            ? "Play Selected Card"
    //            : "Play selected Cards";
    //        Message = QuestionCard.Picks == 1
    //            ? "Please select a card to play."
    //            : $"Please select {QuestionCard.Picks} cards to play.";
    //        IsEnabled = false;
    //        OnClick = async () =>
    //        {
    //            await GameServer.PlayAnswer(new PlayAnswerAction
    //            {
    //                GameCode = Code,
    //                Username = Username,
    //                PlayedCards = SelectedCards,
    //            });
    //            Reset();
    //        };
    //    }
    //    StateHasChanged();
    //}

    //private void OnRoundClosed(RoundClosedEvent roundClosedEvent)
    //{
    //    Reset();
    //    if (IsCardCzar)
    //    {
    //        Label = QuestionCard.Picks == 1
    //            ? "Confirm Winning Card"
    //            : "Confirm Winning Card";
    //        Message = QuestionCard.Picks == 1
    //            ? "Please select winning card."
    //            : "Please select winning cards.";
    //        IsEnabled = false;
    //        OnClick = async () =>
    //        {
    //            await GameServer.PickWinningAnswer(new PickWinnerAnswerAction
    //            {
    //                GameCode = Code,
    //                WinningCards = SelectedCards,
    //            });
    //            Reset();
    //        };
    //    }
    //    else
    //    {
    //        Message = "Please wait for CardCzar to make their decision.";
    //    }
    //    StateHasChanged();
    //}

    //private void OnCardSelected(CardSelectedEvent cardSelectedEvent)
    //{
    //    if (IsCardCzar) return;

    //    SelectedCards = cardSelectedEvent.SelectedCards;

    //    if (SelectedCards.Count == QuestionCard.Picks)
    //    {
    //        Message = string.Empty;
    //        IsEnabled = true;
    //    }
    //    else
    //    {
    //        Message = QuestionCard.Picks == 1
    //            ? "Please select a card to play."
    //            : $"Please select {QuestionCard.Picks} cards to play.";
    //        IsEnabled = false;
    //    }

    //    StateHasChanged();
    //}

    //private void OnWinningCardSelected(WinningCardSelectedEvent winningCardSelectedEvent)
    //{
    //    if (!IsCardCzar) return;

    //    SelectedCards = winningCardSelectedEvent.SelectedWinningCards;

    //    if (SelectedCards.Any())
    //    {
    //        Message = string.Empty;
    //        IsEnabled = true;
    //    }

    //    StateHasChanged();
    //}

    //private void OnRoundEnded(RoundEndedEvent roundEndedEvent)
    //{
    //    Reset();
    //    Label = "Start New Round";
    //    OnClick = async () =>
    //    {
    //        await GameServer.StartRound(new StartRoundAction
    //        {
    //            GameCode = Code
    //        });
    //        Reset();
    //    };
    //    StateHasChanged();
    //}

    //private void Reset()
    //{
    //    Label = string.Empty;
    //    Message = string.Empty;
    //    IsEnabled = true;
    //    OnClick = () => { };
    //}
}
